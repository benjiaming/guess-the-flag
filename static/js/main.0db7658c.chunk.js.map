{"version":3,"sources":["Flag.js","ListUtils.js","CountryUtils.js","App.js","serviceWorker.js","index.js"],"names":["Hint","_ref","showHint","hint","onClick","react_default","a","createElement","className","Flag","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","e","parseInt","target","dataset","attr","_this2","_this$props","selectCountries","currentCountry","numCorrect","numIncorrect","incorrectGuesses","handleHint","country","countryList","map","c","i","has","key","data-attr","name","Flag_Hint","src","flag","alt","React","Component","pickRandomPos","arr","max","length","Math","floor","random","getRandomCountries","countries","numCountries","num","randomIdx","ListUtils","toConsumableArray","Array","keys","slice","getCurrentCountry","getHint","concat","subregion","capital","_callee","result","regenerator_default","wrap","_context","prev","next","fetch","then","d","json","sent","abrupt","loaded","stop","Header","App","state","undefined","Set","_x","_loadCountries","apply","arguments","CountryUtils","parsedCountries","setState","objectSpread","countryPos","prevState","add","_this$state","App_Header","Flag_Flag","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0db7658c.chunk.js","sourcesContent":["import React from 'react';\n\nconst Hint = ({showHint, hint, onClick}) => {\n    return (\n        showHint ?  \n          <div className=\"hint-text\">{hint}</div> :\n         <button className=\"hint-button\" onClick={onClick}>Reveal a hint</button>\n    );\n  }\n    \nexport default class Flag extends React.Component {\n    constructor(props) {\n      super(props);\n      this.handleClick = this.handleClick.bind(this);\n    }\n    handleClick(e) {\n      this.props.onClick(parseInt(e.target.dataset.attr, 10))\n    }\n    render() {\n      const {selectCountries, currentCountry, numCorrect, numIncorrect, incorrectGuesses, showHint, handleHint, hint} = this.props;\n      const country = selectCountries[currentCountry];\n      const countryList = selectCountries.map((c, i) => {\n        let className = \"country-name\";\n        if (incorrectGuesses.has(i)) {\n          className += \" wrong-guess\";\n        }\n        return (\n          <span \n            key={i} \n            className={className}\n            data-attr={i}\n          >{c.name}</span>\n        );\n      });\n      return (\n        <div className=\"flag-box\">\n          <div className=\"countries\" onClick={(e) => this.handleClick(e)}>\n              {countryList}\n          </div>\n          <Hint showHint={showHint} onClick={()=> handleHint()} hint={hint} />\n          <div className=\"flag\">\n            <img src={country.flag} alt=\"flag\" />\n          </div>\n          <div className=\"score\">\n            Correct: {numCorrect} Incorrect: {numIncorrect}\n          </div>\n        </div>\n      );\n    }\n  }","\nexport const shuffle = (arr) => {\n  for (let i=arr.length-1; i >= 0; i--) {\n    const randomIdx = Math.floor(Math.random()*(arr.length-1));\n    [arr[i], arr[randomIdx]] = [arr[randomIdx], arr[i]];\n  }\n  return arr;\n}\nexport const randomInt = (max) => {\n  return Math.floor(Math.random()*max);\n}  \nexport const pickRandomPos = (arr) => {\n  return randomInt(arr.length-1);\n}\nexport const pickRandomElement = (arr) => {\n  return arr[pickRandomPos(arr)];\n}\nexport const range = (num) => {\n  return [...Array(num).keys()];\n}\n","import * as ListUtils from './ListUtils';\n\nexport const getRandomCountries = (countries, numCountries) => {\n    const rangeNum = ListUtils.range(countries.length);\n    const countryPos = ListUtils.shuffle(rangeNum).slice(0, numCountries);\n    return countryPos.map(i => countries[i]);\n}\nexport const getCurrentCountry = (selectCountries) => {\n    return ListUtils.pickRandomPos(selectCountries);\n}\nexport const getHint = (country) => {\n    return `This country is located in ${country.subregion}. It's capital is ${country.capital}.`;\n}\n\nexport async function loadCountries(numCountries) {\n    const url = 'https://restcountries.eu/rest/v2/all';\n\n    const result = await fetch(url).then(d => d.json());\n    const countries = result.map(i => ({name: i.name, flag: i.flag, capital: i.capital, subregion: i.subregion}));\n    const selectCountries = getRandomCountries(countries, numCountries);\n    const currentCountry = getCurrentCountry(selectCountries);\n    const hint = getHint(selectCountries[currentCountry]);\n    return {countries, selectCountries, currentCountry, hint, loaded: true};        \n  }\n\n\n","import React from 'react';\nimport './App.css';\nimport Flag from './Flag';\nimport * as CountryUtils from './CountryUtils';\n\nconst Header = () => {\n  return (\n    <header>\n      Guess The Flag\n    </header>\n  );\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      countries: [],\n      currentCountry: undefined,\n      selectCountries: [],\n      loaded: false,\n      numCorrect: 0,\n      numIncorrect: 0,\n      incorrectGuesses: new Set(),\n      hint: '',\n      showHint: false,\n    }\n    this.numCountries = 4;\n    this.onClick = this.onClick.bind(this);\n    this.handleHint = this.handleHint.bind(this);\n  }\n  componentDidMount() {\n      CountryUtils.loadCountries(this.numCountries).then((parsedCountries) => {\n        this.setState({...parsedCountries, loaded: true});\n      });\n  }\n  onClick(countryPos) {\n    if (countryPos === undefined) {\n      return;\n    }\n    if (this.state.currentCountry === countryPos) {\n      const selectCountries = CountryUtils.getRandomCountries(this.state.countries, this.numCountries);\n      const currentCountry = CountryUtils.getCurrentCountry(selectCountries);\n      const hint = CountryUtils.getHint(selectCountries[currentCountry]);\n      this.setState(prevState => { return {\n        numCorrect: prevState.numCorrect+1,\n        incorrectGuesses: new Set(),\n        selectCountries,\n        currentCountry,\n        hint,\n        showHint: false,\n      }});\n    } else {\n      const incorrectGuesses = new Set(this.state.incorrectGuesses);\n      incorrectGuesses.add(countryPos);\n      this.setState(prevState => {\n         return {\n            numIncorrect: prevState.numIncorrect + 1,\n            incorrectGuesses,\n          }\n      });\n\n    }\n  }\n  handleHint() {\n    this.setState({showHint: true});\n  }\n  render() {\n    const {selectCountries, currentCountry, loaded, \n      numCorrect, numIncorrect, incorrectGuesses, showHint, hint} = this.state;\n    return (\n      <div className=\"App\">\n        <Header />\n        { loaded ? \n            <Flag\n              countries={selectCountries} \n              selectCountries={selectCountries} \n              currentCountry={currentCountry}\n              onClick={this.onClick}\n              numCorrect={numCorrect}\n              numIncorrect={numIncorrect}\n              incorrectGuesses={incorrectGuesses}\n              showHint={showHint}\n              hint={hint}\n              handleHint={this.handleHint}\n            />\n            : \"Loading\"\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}